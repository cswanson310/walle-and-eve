\programVariables{
  R A; /* walle's maximum acceleration */
  R B; /* walle's maximum braking */
  R T; /* Time-trigger limit on evolution */
  R t;  /* time */

  R theta_w; /* Position of walle in y direction */
  R z_w; /* Position of walle in z direction */
  R dz_w; /* Unit vector in direction of travel, z direction */
  R r_w; /* Over-approximation on radius of walle */
  R omega_w; /* Angular velocity of walle */
  R a; /* Linear acceleration of walle */

  R theta_e; /* Position of eve in y direction */
  R z_e; /* Position of eve in z direction */
  R dz_e; /* Unit vector in direction of travel, z direction */
  R r_e; /* Over-approximation on radius of eve */
  R omega_w; /* Angular velocity of eve */

  R buffer; /* Required distance between center of walle and center of eve */
  R cute_r; /* Distance between center of walle and center of eve */
}

\problem{
(
v_w > 0 & v_e > 0 &
Abs(omega_w - omega_e) < 360 &
T > 0 & A > 0 & B > 0 &
r_w > 0 & r_e > 0 &
buffer > r_e + r_w &
dz_w > 0 & dz_e = dz_w &
((omega_e < omega_w) -> Abs(omega_w - omega_e) >= (v_w - v_e)*T + (v_e^2 - v_w*v_e)/B) &
((omega_e >= omega_w) -> Abs(omega_w - omega_e) >= (v_e - v_w)*T + (v_e^2 - v_w*v_e)/A)
)
->
\[(
   if (v_w > v_e) then
      /* WallE is moving faster, have to make sure he doesn't get too close */
     if (omega_e - omega_w > 180) then
       a := 0
     else
       a := -B
     fi
   else if v_w = v_e then
     a := 0
   fi else
     if (omega_e - omega_w < 180) then
       a := A
     else
       a := 0
     fi
   fi;
   t := 0;
   {
     x_w' = v_w*dx_w, y_w' = v_w*dy_w, z_w' = dz_w, v_w' = a,
     dx_w' = -v_w*dy_w/cute_r, dy_w' = v_w*dx_w/cute_r, dz_w' = 0,

     x_e' = v_e*dx_e, y_e' = v_e*dy_e, z_e' = dz_e, /* v_e' = e_a, */
     dx_e' = -v_e*dy_e/cute_r, dy_e' = v_e*dx_e/cute_r, dz_e' = 0,

     t' = 1, t <= T, v_w >= 0, v_e >= 0
    }@invariant(
                 t >= 0,
                 x_w = cute_r*dy_w,
                 y_w = cute_r*dx_w,
                 x_e = cute_r*dy_e,
                 y_e = cute_r*dx_e,
                 dx_w^2 + dy_w^2 = 1,
                 dx_e^2 + dy_e^2 = 1,
                 (x_w)^2 + (y_w)^2 = cute_r^2,
                 (x_e)^2 + (y_e)^2 = cute_r^2
                )
   )*@invariant(
                x_w = cute_r*dy_w &
                y_w = cute_r*dx_w &
                x_e = cute_r*dy_e &
                y_e = cute_r*dx_e &
                dx_w^2 + dy_w^2 = 1 &
                dx_e^2 + dy_e^2 = 1 &
                (x_w)^2 + (y_w)^2 = cute_r^2 &
                (x_e)^2 + (y_e)^2 = cute_r^2 &
                (v_e < v_w -> Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r + (v_w - v_e)*T + (v_e^2 - v_w*v_e)/B) &
                (v_e >= v_w -> Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r + (v_e - v_w)*T + (v_e^2 - v_w*v_e)/A) &
                v_w > 0 &
                v_e > 0
                )
\](
Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r
)

}
