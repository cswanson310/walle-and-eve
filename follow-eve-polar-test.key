\programVariables{
  /* R A; * walle's maximum acceleration */
  /* R B; * walle's maximum braking */
  R T; /* Time-trigger limit on evolution */
  R t;  /* time */

  R theta_w; /* Position of walle in y direction */
  R z_w; /* Position of walle in z direction */
  R dz_w; /* Unit vector in direction of travel, z direction */
  R r_w; /* Over-approximation on radius of walle */
  R omega_w; /* Angular velocity of walle */
  R a; /* Linear acceleration of walle */

  R theta_e; /* Position of eve in y direction */
  R z_e; /* Position of eve in z direction */
  R dz_e; /* Unit vector in direction of travel, z direction */
  R r_e; /* Over-approximation on radius of eve */
  R omega_e; /* Angular velocity of eve */

  R cute_r; /* Distance between center of walle and center of eve */
}

\problem{
(
omega_w > 0 & omega_e > 0 &
0 < theta_e - theta_w & theta_e - theta_w < 360 &
T > 0 &
r_w > 0 & r_e > 0 &
dz_w > 0 & dz_e = dz_w
)
->
\[(
   a := *;
   ?(
     (omega_w > omega_e -> T <= ((omega_w - a*T) - omega_e)/a) &
      (omega_e > omega_w -> T <= ((omega_w + a*T) - omega_e)/a) &
     theta_e + omega_e*T > theta_w + omega_w*T + a*T^2/2 &
     360 > theta_e + omega_e*T - (theta_w + omega_w*T + a*T^2/2));
   t := 0;
   {
     theta_w' = omega_w, z_w' = dz_w, omega_w' = a,
     theta_e' = omega_e, z_e' = dz_e,
     t' = 1, t <= T, omega_e > 0, omega_w > 0
    }@invariant(
                 t >= 0
                )
   )*@invariant(
                0 < theta_e - theta_w &
                theta_e - theta_w < 360
                )
\](
theta_e != theta_w
)

}
