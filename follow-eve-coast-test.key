\programVariables{
  R A; /* both robot's maximum acceleration */
  R B; /* both robot's maximum braking */
  R T; /* Time-trigger limit on evolution */
  R t; /* time */

  R x_w; /* Position of walle in x direction */
  R y_w; /* Position of walle in y direction */
  R z_w; /* Position of walle in z direction */
  R dx_w; /* Unit vector in direction of travel, x direction */
  R dy_w; /* Unit vector in direction of travel, y direction */
  R dz_w; /* Unit vector in direction of travel, z direction */
  R r_w; /* Radius of walle */
  R v_w; /* Linear velocity of walle */
  R a_w; /* Linear acceleration of walle */

  R x_e; /* Position of eve in x direction */
  R y_e; /* Position of eve in y direction */
  R z_e; /* Position of eve in z direction */
  R dx_e; /* Unit vector in direction of travel, x direction */
  R dy_e; /* Unit vector in direction of travel, y direction */
  R dz_e; /* Unit vector in direction of travel, z direction */
  R r_e; /* Radius of eve */
  R v_e; /* Linear velocity of eve */
  R e_a; /* Linear acceleration of eve */

  R c_love_x; /* center of circle they are circling */
  R c_love_y; /* center of circle they are circling */

  R cute_r; /* Max distance between center of walle and center of eve */
}

\problem{
(
v_w > 0 & v_e > 0 &
T > 0 & A > 0 & B > 0
x_w = trackr*dy_w + c_love_x &
y_w = trackr*dx_w + c_love_y &
x_e = trackr*dy_e + c_love_x &
y_e = trackr*dx_e + c_love_y &
r_w > 0 & r_e > 0 & cute_r > r_w + r_e &
(x_w - c_love_x)^2 + (y_w - c_love_y)^2 = cute_r^2 &
(x_e - c_love_x)^2 + (y_e - c_love_y)^2 = cute_r^2 &
dx_w^2 + dy_w^2 = 1 & dx_e^2 + dy_e^2 = 1 &
dz_w = 1 & dz_e = 1
)
->
\[(
   t := 0;
   {
     x_w' = v_w*dx_w, y_w' = v_w*dy_w, z_w' = dz_w, /* v_w' = a_w, */
     dx_w' = -v_w*dy_w/trackr, dy_w' = v_w*dx_w/trackr, dz_w' = 0,

     x_e' = v_e*dx_e, y_e' = v_e*dy_e, z_e' = dz_e, /* v_e' = e_a, */
     dx_e' = -v_e*dy_e/trackr, dy_e' = v_e*dx_e/trackr, dz_e' = 0,

     t' = 1, t <= T, v_w >= 0, v_e >= 0
    }@invariant(
                 t >= 0,
                 x_w = trackr*dy_w + c_love_x,
                 y_w = trackr*dx_w + c_love_y,
                 x_e = trackr*dy_e + c_love_x,
                 y_e = trackr*dx_e + c_love_y,
                 dx_w^2 + dy_w^2 = 1,
                 dx_e^2 + dy_e^2 = 1,
                 (x_w - c_love_x)^2 + (y_w - c_love_y)^2 = cute_r^2,
                 (x_e - c_love_y)^2 + (y_e - c_love_y)^2 = cute_r^2
                )
   )*@invariant(
                x_w = trackr*dy_w + c_love_x &
                y_w = trackr*dx_w + c_love_y &
                x_e = trackr*dy_e + c_love_x &
                y_e = trackr*dx_e + c_love_y &
                dx_w^2 + dy_w^2 = 1 &
                dx_e^2 + dy_e^2 = 1 &
                (x_w - c_love_x)^2 + (y_w - c_love_y)^2 = cute_r^2 &
                (x_e - c_love_y)^2 + (y_e - c_love_y)^2 = cute_r^2 &
                v_w > 0 &
                v_e > 0
                )
\](
(x_w - c_love_x)^2 + (y_w - c_love_y)^2 = cute_r^2 &
(x_e - c_love_y)^2 + (y_e - c_love_y)^2 = cute_r^2

/* can extend to this?
    Abs(x_e - x_w) >= buffer &
    Abs(x_e - x_w) <= cute_r &
    Abs(y_e - y_w) >= buffer &
    Abs(y_e - y_w) <= cute_r */
)

}

