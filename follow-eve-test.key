\programVariables{
  R A; /* walle's maximum acceleration */
  R B; /* walle's maximum braking */
  R T; /* Time-trigger limit on evolution */
  R t;  /* time */
  R x_w; /* Position of walle in x direction */
  R y_w; /* Position of walle in y direction */
  R z_w; /* Position of walle in z direction */
  R dx_w; /* Unit vector in direction of travel, x direction */
  R dy_w; /* Unit vector in direction of travel, y direction */
  R dz_w; /* Unit vector in direction of travel, z direction */
  R r_w; /* Radius of the walle */
  R v_w; /* Linear velocity of walle */
  R a; /* Linear acceleration of walle */

  R x_e; /* Position of eve in x direction */
  R y_e; /* Position of eve in y direction */
  R z_e; /* Position of eve in z direction */
  R dx_e; /* Unit vector in direction of travel, x direction */
  R dy_e; /* Unit vector in direction of travel, y direction */
  R dz_e; /* Unit vector in direction of travel, z direction */
  R r_e; /* Radius of the eve */
  R v_e; /* Linear velocity of eve */

  R buffer; /* Required distance between center of walle and center of eve */
  R cute_r; /* Max distance between center of walle and center of eve */
}

\problem{
(
v_w > 0 & v_e > 0 &
T > 0 &
x_w = cute_r*dy_w &
y_w = -cute_r*dx_w &
x_e = cute_r*dy_e &
y_e = -cute_r*dx_e &
r_w > 0 & r_e > 0 &
(x_w)^2 + (y_w)^2 = cute_r^2 &
(x_e)^2 + (y_e)^2 = cute_r^2 &
dx_w^2 + dy_w^2 = 1 & dx_e^2 + dy_e^2 = 1 &
dz_w = 1 & dz_e = 1 &
((v_e < v_w) -> Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r + (v_w - v_e)*T + (v_e^2 - v_w*v_e)/B) &
((v_e >= v_w) -> Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r + (v_e - v_w)*T + (v_e^2 - v_w*v_e)/A)
)
->
\[(
   if (v_e < v_w) then
       /* WallE is moving faster, have to make sure he doesn't get too close */

                                                      /* (wallE's distance travelled in T) */
      /* we want to control the distance behind us on the circle so breaking case */
     if (Abs(x_w - x_e) + Abs(y_w + y_e) >= (cute_r + (-B*T^2/2 + v_w*T) +
                                        /*  (eve's distance travelled towards WallE in T) */
                                            (v_w - v_e)*T +
                                        /*  (distance eve will travel while wallE is braking) */
                                        /*  note: braking until speeds are equal, not until a stop */
                                            (v_e*(((v_w - B*T) - v_e)/B)) +
                                        /*  (distance wallE will travel while wallE is braking) */
                                            (v_e^2 - v_e*(v_w - B*T))/B)
        /* above was safe to brake */
        ) then
       a := -B
     else
       a := A
     fi
   else
     /* eve is moving faster, we have to get out of her way */

                                                   /* (wallE's distance travelled in T) */
     if (Abs(x_w - x_e) + Abs(y_w + y_e) >= (cute_r + (A*T^2/2 + v_w*T) +
                                        /*  (eve's distance travelled towards us in T) */
                                            (v_e - v_w)*T +
                                        /*  (distance eve will travel while wallE is accelerating) */
                                        /*  note: braking until speeds are equal, not until a stop */
                                            (v_e*((v_e - (v_w + A*T))/A)) +
                                        /*  (distance wallE will travel while wallE is braking) */
                                            (v_e^2 - v_e*(v_w + A*T))/B)
          /* above was safe to accelerate */
        ) then
       a := A
     else
       a := -B
     fi
   fi;
   t := 0;
   {
     x_w' = v_w*dx_w, y_w' = v_w*dy_w, z_w' = dz_w, v_w' = a,
     dx_w' = -v_w*dy_w/cute_r, dy_w' = v_w*dx_w/cute_r, dz_w' = 0,

     x_e' = v_e*dx_e, y_e' = v_e*dy_e, z_e' = dz_e, /* v_e' = e_a, */
     dx_e' = -v_e*dy_e/cute_r, dy_e' = v_e*dx_e/cute_r, dz_e' = 0,

     t' = 1, t <= T, v_w >= 0, v_e >= 0
    }@invariant(
                 t >= 0,
                 x_w = cute_r*dy_w,
                 y_w = cute_r*dx_w,
                 x_e = cute_r*dy_e,
                 y_e = cute_r*dx_e,
                 dx_w^2 + dy_w^2 = 1,
                 dx_e^2 + dy_e^2 = 1,
                 (x_w)^2 + (y_w)^2 = cute_r^2,
                 (x_e)^2 + (y_e)^2 = cute_r^2
                )
   )*@invariant(
                x_w = cute_r*dy_w &
                y_w = cute_r*dx_w &
                x_e = cute_r*dy_e &
                y_e = cute_r*dx_e &
                dx_w^2 + dy_w^2 = 1 &
                dx_e^2 + dy_e^2 = 1 &
                (x_w)^2 + (y_w)^2 = cute_r^2 &
                (x_e)^2 + (y_e)^2 = cute_r^2 &
                (v_e < v_w -> Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r + (v_w - v_e)*T + (v_e^2 - v_w*v_e)/B) &
                (v_e >= v_w -> Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r + (v_e - v_w)*T + (v_e^2 - v_w*v_e)/A) &
                v_w > 0 &
                v_e > 0
                )
\](
Abs(x_w - x_e) + Abs(y_w - y_e) >= cute_r
)

}
