\programVariables{
  R A; /*walle's maximum acceleration*/
  R B; /*walle's maximum braking*/
  R T; /* Time-trigger limit on evolution */
  R t;  /* time */
  R w_x; /* Position of walle in x direction */
  R w_y; /* Position of walle in y direction */
  R w_z; /* Position of walle in z direction */
  R w_dx; /* Unit vector in direction of travel, x direction */
  R w_dy; /* Unit vector in direction of travel, y direction */
  R w_dz; /* Unit vector in direction of travel, z direction */
  R w_r; /* Radius of the walle */
  R w_v; /* Linear velocity of walle */
  R w_a; /* Linear acceleration of walle */
  R w_trackr; /* Radius of walle's track */

  R e_x; /* Position of eve in x direction */
  R e_y; /* Position of eve in y direction */
  R e_z; /* Position of eve in z direction */
  R e_dx; /* Unit vector in direction of travel, x direction */
  R e_dy; /* Unit vector in direction of travel, y direction */
  R e_dz; /* Unit vector in direction of travel, z direction */
  R e_r; /* Radius of the eve */
  R e_v;   /* Linear velocity of eve */
  R e_a; /* Linear acceleration of eve */
  R e_trackr; /* Radius of eve's track */

  R minr; /* Minimum turning radius */
  R buffer; /* Required distance between center of walle and center of eve */
  R cute_r; /* Max distance between center of walle and center of eve */
}

\problem{
w_v >= 0 & e_v >= 0 &
A > 0 & B > 0 & T > 0 & 
minr > 0 & w_r > 0 & e_r > 0 & buffer > r + e_r &
w_dx^2 + w_dy^2 + w_dz^2 = 1 & e_dx^2 + e_dy^2 + e_dz^2 = 1 &
w_dz = e_dz
)
->
\[(
   trackr := *; ?(trackr > minr | trackr < -minr); /* can't turn too tightly */
   rogtrackr := *; ?rogtrackr != 0;
   if (Abs(x - rogx) >= buffer + A*T^2/2 + v*T + rogv*T + rogv*((v + A*T)/B) + (v + A*T)^2/(2*B) &
       Abs(y - rogy) >= buffer + A*T^2/2 + v*T + rogv*T + rogv*((v + A*T)/B) + (v + A*T)^2/(2*B)
      ) then
     a := A
   else
     if (v = 0) then
       a := 0
     else
       a := -B
     fi
   fi;
   t := 0;
   {
     w_x' = w_v*w_dx, w_y' = w_v*w_dy, w_z' = w_dz, w_v' = w_a,
     w_dx' = -w_v*w_dy/w_trackr, w_dy' = w_v*w_dx/w_trackr, w_dz' = 0,

     e_x' = e_v*e_dx, e_y' = e_v*e_dy, e_z' = e_dz, e_v' = e_a,
     e_dx' = -e_v*e_dy/e_trackr, e_dy' = e_v*e_dx/e_trackr, e_dz' = 0,

     t' = 1, t <= T, w_v >= 0, e_v >= 0
    }@invariant(
                 t >= 0,
                 w_dx^2 + w_dy^2 + w_dz^2 = 1,
                 e_dx^2 + e_dy^2 + e_dz^2 = 1
                )
   )*@invariant(
                w_dx^2 + w_dy^2 + w_dz^2 = 1 &
                e_dx^2 + e_dy^2 + e_dz^2 = 1 &
                w_v >= 0 &
                e_v >= 0
                )
\](
Abs(e_x - w_x) >= buffer &
Abs(e_x - w_x) <= cute_r &
Abs(e_y - w_y) >= buffer &
Abs(e_y - w_y) <= cute_r
)

}

